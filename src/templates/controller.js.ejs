<?php

namespace App\Http\Controllers\<%= props.spaceFirst %>;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use <%= props.nameModelSpace _%>\<%= props.nameCapitalize %>;

<% for ( var prop in props.resultsQuery ) { _%>
    <%_ if(props.resultsQuery[prop].Key.indexOf('MUL') >= 0) { _%>
        <%
           var nome = props.resultsQuery[prop].Field.split('_');
           nome = nome.splice(0, 2);
           nome = nome.join('_'); 
           var nomeCase = props.strings.camelCase(nome);
        %>
use <%= props.nameModelSpace _%>\<%= props.checkPlural(nomeCase) %>;

    <%_ } _%>
<%_ } _%>

class <%= props.nameCapitalize %>Controller extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $data = ['<%= props.name %>s'];
    	$<%= props.name %>s =<%= props.nameCapitalize %>::orderBy('id', 'desc')->get();
    	return view('<%= props.space %>.<%= props.name %>.index', compact($data));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $data = [];
        <% for ( var prop in props.resultsQuery ) { _%>
            <%_ if(props.resultsQuery[prop].Key.indexOf('MUL') >= 0) { _%>
                <%
                   var nome = props.resultsQuery[prop].Field.split('_');
                   nome = nome.splice(0, 2);
                   nome = nome.join('_'); 
                   var nomeCase = props.checkPlural(props.strings.camelCase(nome));
                %>
        $<%= nome %>s = <%= nomeCase %>::get()->pluck('id','id')->toArray();
        array_push($data, '<%= nome %>s');
            <%_ } _%>
        <%_ } _%>
        return view('<%= props.space %>.<%= props.name %>.edit', compact($data));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $request->validate([
        <%_ props.resultsQuery.forEach(function(res, idx, array){ _%>
            '<%= res.Field _%>' => 'required'<% if (idx != array.length - 1){ %>,<% } %>
        <%_ }); _%>
        ]);
        try {
            $input = $request->all();
            $<%= props.name %>s = <%= props.nameCapitalize %>::create($input);
            return redirect()->route('<%= props.space %>.<%= props.name %>.index')->with('msg', 'Registration successfully registered.');
        } catch (\Exception $e) {
            return redirect()->back()->with('msg', 'Unable to save data')->with('error', true)->withInput();
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $data = ['<%= props.name %>'];
        $<%= props.name %> = <%= props.nameCapitalize %>::find($id);
        return view('<%= props.space %>.<%= props.name %>.show', compact($data));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $data = ['<%= props.name %>'];
        $<%= props.name %> = <%= props.nameCapitalize %>::find($id);

        <% for ( var prop in props.resultsQuery ) { _%>
            <%_ if(props.resultsQuery[prop].Key.indexOf('MUL') >= 0) { _%>
                <%
                   var nome = props.resultsQuery[prop].Field.split('_');
                   nome = nome.splice(0, 2);
                   nome = nome.join('_'); 
                   var nomeCase = props.checkPlural(props.strings.camelCase(nome));
                %>
        $<%= nome %>s = <%= nomeCase %>::get()->pluck('id','id')->toArray();
        array_push($data, '<%= nome %>s');
            <%_ } _%>
        <%_ } _%>

        return view('<%= props.space %>.<%= props.name %>.edit', compact($data));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $request->validate([
        <%_ props.resultsQuery.forEach(function(res, idx, array){ _%>
            '<%= res.Field _%>' => 'required'<% if (idx != array.length - 1){ %>,<% } %>
        <%_ }); _%>
        ]);
        $input = $request->except('_token');
        try {
            $<%= props.name %> = <%= props.nameCapitalize %>::find($id)->update($input);
            return redirect()->route('<%= props.space %>.<%= props.name %>.index')->with('msg', 'Registry updated successfully!');
        } catch (\Exception $e) {
            return redirect()->back()->with('msg', 'Could not change registry.')->with('error', true);
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        try {
            $<%= props.name %> = <%= props.nameCapitalize %>::find($id);
            if($<%= props.name %>) $<%= props.name %>->delete();
            return redirect()->route('<%= props.space %>.<%= props.name %>.index')->with('msg', 'Registration successfully deleted!');
        } catch (\Exception $e) {
            return redirect()->route('<%= props.space %>.<%= props.name %>.index')->with('msg', 'Could not delete the record!');
        }
    }
}
